{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/producedbywy/prima-safe-rebuild/project-backup/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport default prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/producedbywy/prima-safe-rebuild/project-backup/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport { compare } from \"bcryptjs\"\nimport prisma from \"@/lib/prisma\"\nimport { AuthOptions, Session, DefaultSession } from \"next-auth\"\nimport { JWT } from \"next-auth/jwt\"\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string\n      email: string\n      name: string\n    } & DefaultSession[\"user\"]\n  }\n}\n\ninterface ExtendedToken extends JWT {\n  id: string\n  email: string\n  name: string\n}\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        try {\n          if (!credentials?.email || !credentials?.password) {\n            throw new Error(\"Missing credentials\")\n          }\n\n          const user = await prisma.user.findUnique({\n            where: {\n              email: credentials.email,\n            },\n          })\n\n          if (!user) {\n            throw new Error(\"No user found\")\n          }\n\n          const isPasswordValid = await compare(\n            credentials.password,\n            user.password\n          )\n\n          if (!isPasswordValid) {\n            throw new Error(\"Invalid password\")\n          }\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n          }\n        } catch (error) {\n          console.error(\"Auth error:\", error)\n          return null\n        }\n      }\n    })\n  ],\n  debug: process.env.NODE_ENV === \"development\",\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  pages: {\n    signIn: \"/login\",\n    error: \"/login\",\n  },\n  callbacks: {\n    async jwt({ token, user }): Promise<ExtendedToken> {\n      if (user) {\n        return {\n          ...token,\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        }\n      }\n      return token as ExtendedToken\n    },\n    async session({ session, token }): Promise<Session> {\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          id: token.id as string,\n          email: token.email as string,\n          name: token.name as string,\n        },\n      }\n    }\n  },\n  secret: process.env.NEXTAUTH_SECRET\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;;;;AAoBO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;wBACjD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAClC,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,iBAAiB;wBACpB,MAAM,IAAI,MAAM;oBAClB;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACjB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,eAAe;oBAC7B,OAAO;gBACT;YACF;QACF;KACD;IACD,OAAO,oDAAyB;IAChC,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;oBACZ,OAAO,MAAM,KAAK;oBAClB,MAAM,MAAM,IAAI;gBAClB;YACF;QACF;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}