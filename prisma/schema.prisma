generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  twoFactorSecret String?
  twoFactorEnabled Boolean  @default(false)

  // Relations
  wallets         Wallet[]
  transactions    Transaction[]
  mobileAccounts  MobileMoneyAccount[]
  virtualCards    VirtualCard[]
  currencyAlerts  CurrencyAlert[]
}

model Wallet {
  id          String    @id @default(cuid())
  currency    String
  balance     Float     @default(0)
  isDefault   Boolean   @default(false)
  lastUpdated DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Transaction {
  id          String    @id @default(cuid())
  type        String    // "mobile-money", "virtual-card", "transfer"
  amount      Float
  currency    String
  status      String    // "completed", "pending", "failed"
  description String?
  receipt     String?   // URL to receipt if applicable
  provider    String?   // For mobile money transactions
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model MobileMoneyAccount {
  id          String    @id @default(cuid())
  provider    String
  phoneNumber String
  accountName String
  isVerified  Boolean   @default(false)
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@unique([userId, provider, phoneNumber])
}

model VirtualCard {
  id            String    @id @default(cuid())
  cardNumber    String    @unique
  expiryMonth   Int
  expiryYear    Int
  cvv           String
  status        String    // "active", "frozen", "expired"
  currency      String
  spendingLimit Float?
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model CurrencyAlert {
  id           String    @id @default(cuid())
  fromCurrency String
  toCurrency   String
  targetRate   Float
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  
  // Relations
  user         User      @relation(fields: [userId], references: [id])
  userId       String
}
